package com.application.cool.history.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON".
*/
public class PersonDao extends AbstractDao<Person, Integer> {

    public static final String TABLENAME = "PERSON";

    /**
     * Properties of entity Person.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Person_id = new Property(0, int.class, "person_id", true, "PERSON_ID");
        public final static Property Avatar_url = new Property(1, String.class, "avatar_url", false, "AVATAR_URL");
        public final static Property Info_url = new Property(2, String.class, "info_url", false, "INFO_URL");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Start = new Property(5, Integer.class, "start", false, "START");
        public final static Property End = new Property(6, Integer.class, "end", false, "END");
        public final static Property Dynasty = new Property(7, String.class, "dynasty", false, "DYNASTY");
        public final static Property Dynasty_detail = new Property(8, String.class, "dynasty_detail", false, "DYNASTY_DETAIL");
        public final static Property Pinyin = new Property(9, String.class, "pinyin", false, "PINYIN");
    }


    public PersonDao(DaoConfig config) {
        super(config);
    }
    
    public PersonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON\" (" + //
                "\"PERSON_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: person_id
                "\"AVATAR_URL\" TEXT," + // 1: avatar_url
                "\"INFO_URL\" TEXT," + // 2: info_url
                "\"NAME\" TEXT," + // 3: name
                "\"TYPE\" TEXT," + // 4: type
                "\"START\" INTEGER," + // 5: start
                "\"END\" INTEGER," + // 6: end
                "\"DYNASTY\" TEXT," + // 7: dynasty
                "\"DYNASTY_DETAIL\" TEXT," + // 8: dynasty_detail
                "\"PINYIN\" TEXT);"); // 9: pinyin
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Person entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPerson_id());
 
        String avatar_url = entity.getAvatar_url();
        if (avatar_url != null) {
            stmt.bindString(2, avatar_url);
        }
 
        String info_url = entity.getInfo_url();
        if (info_url != null) {
            stmt.bindString(3, info_url);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        Integer start = entity.getStart();
        if (start != null) {
            stmt.bindLong(6, start);
        }
 
        Integer end = entity.getEnd();
        if (end != null) {
            stmt.bindLong(7, end);
        }
 
        String dynasty = entity.getDynasty();
        if (dynasty != null) {
            stmt.bindString(8, dynasty);
        }
 
        String dynasty_detail = entity.getDynasty_detail();
        if (dynasty_detail != null) {
            stmt.bindString(9, dynasty_detail);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(10, pinyin);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Person entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPerson_id());
 
        String avatar_url = entity.getAvatar_url();
        if (avatar_url != null) {
            stmt.bindString(2, avatar_url);
        }
 
        String info_url = entity.getInfo_url();
        if (info_url != null) {
            stmt.bindString(3, info_url);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        Integer start = entity.getStart();
        if (start != null) {
            stmt.bindLong(6, start);
        }
 
        Integer end = entity.getEnd();
        if (end != null) {
            stmt.bindLong(7, end);
        }
 
        String dynasty = entity.getDynasty();
        if (dynasty != null) {
            stmt.bindString(8, dynasty);
        }
 
        String dynasty_detail = entity.getDynasty_detail();
        if (dynasty_detail != null) {
            stmt.bindString(9, dynasty_detail);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(10, pinyin);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public Person readEntity(Cursor cursor, int offset) {
        Person entity = new Person( //
            cursor.getInt(offset + 0), // person_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // avatar_url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // info_url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // start
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // end
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // dynasty
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // dynasty_detail
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // pinyin
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Person entity, int offset) {
        entity.setPerson_id(cursor.getInt(offset + 0));
        entity.setAvatar_url(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInfo_url(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStart(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setEnd(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setDynasty(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDynasty_detail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPinyin(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(Person entity, long rowId) {
        return entity.getPerson_id();
    }
    
    @Override
    public Integer getKey(Person entity) {
        if(entity != null) {
            return entity.getPerson_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Person entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
