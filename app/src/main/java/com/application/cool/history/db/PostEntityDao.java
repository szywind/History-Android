package com.application.cool.history.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POST_ENTITY".
*/
public class PostEntityDao extends AbstractDao<PostEntity, String> {

    public static final String TABLENAME = "POST_ENTITY";

    /**
     * Properties of entity PostEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PostId = new Property(0, String.class, "postId", true, "POST_ID");
        public final static Property ImageURL = new Property(1, String.class, "imageURL", false, "IMAGE_URL");
        public final static Property TextURL = new Property(2, String.class, "textURL", false, "TEXT_URL");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property AuthorId = new Property(5, String.class, "authorId", false, "AUTHOR_ID");
        public final static Property Dynasty = new Property(6, String.class, "dynasty", false, "DYNASTY");
        public final static Property Topic = new Property(7, String.class, "topic", false, "TOPIC");
        public final static Property Subtopic = new Property(8, String.class, "subtopic", false, "SUBTOPIC");
        public final static Property Likes = new Property(9, Integer.class, "likes", false, "LIKES");
        public final static Property Dislikes = new Property(10, Integer.class, "dislikes", false, "DISLIKES");
        public final static Property Subscribers = new Property(11, Integer.class, "subscribers", false, "SUBSCRIBERS");
        public final static Property Replies = new Property(12, Integer.class, "replies", false, "REPLIES");
        public final static Property Reviews = new Property(13, Integer.class, "reviews", false, "REVIEWS");
    }


    public PostEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PostEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POST_ENTITY\" (" + //
                "\"POST_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: postId
                "\"IMAGE_URL\" TEXT," + // 1: imageURL
                "\"TEXT_URL\" TEXT," + // 2: textURL
                "\"TITLE\" TEXT," + // 3: title
                "\"TYPE\" TEXT," + // 4: type
                "\"AUTHOR_ID\" TEXT," + // 5: authorId
                "\"DYNASTY\" TEXT," + // 6: dynasty
                "\"TOPIC\" TEXT," + // 7: topic
                "\"SUBTOPIC\" TEXT," + // 8: subtopic
                "\"LIKES\" INTEGER," + // 9: likes
                "\"DISLIKES\" INTEGER," + // 10: dislikes
                "\"SUBSCRIBERS\" INTEGER," + // 11: subscribers
                "\"REPLIES\" INTEGER," + // 12: replies
                "\"REVIEWS\" INTEGER);"); // 13: reviews
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POST_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PostEntity entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getPostId());
 
        String imageURL = entity.getImageURL();
        if (imageURL != null) {
            stmt.bindString(2, imageURL);
        }
 
        String textURL = entity.getTextURL();
        if (textURL != null) {
            stmt.bindString(3, textURL);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String authorId = entity.getAuthorId();
        if (authorId != null) {
            stmt.bindString(6, authorId);
        }
 
        String dynasty = entity.getDynasty();
        if (dynasty != null) {
            stmt.bindString(7, dynasty);
        }
 
        String topic = entity.getTopic();
        if (topic != null) {
            stmt.bindString(8, topic);
        }
 
        String subtopic = entity.getSubtopic();
        if (subtopic != null) {
            stmt.bindString(9, subtopic);
        }
 
        Integer likes = entity.getLikes();
        if (likes != null) {
            stmt.bindLong(10, likes);
        }
 
        Integer dislikes = entity.getDislikes();
        if (dislikes != null) {
            stmt.bindLong(11, dislikes);
        }
 
        Integer subscribers = entity.getSubscribers();
        if (subscribers != null) {
            stmt.bindLong(12, subscribers);
        }
 
        Integer replies = entity.getReplies();
        if (replies != null) {
            stmt.bindLong(13, replies);
        }
 
        Integer reviews = entity.getReviews();
        if (reviews != null) {
            stmt.bindLong(14, reviews);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PostEntity entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getPostId());
 
        String imageURL = entity.getImageURL();
        if (imageURL != null) {
            stmt.bindString(2, imageURL);
        }
 
        String textURL = entity.getTextURL();
        if (textURL != null) {
            stmt.bindString(3, textURL);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String authorId = entity.getAuthorId();
        if (authorId != null) {
            stmt.bindString(6, authorId);
        }
 
        String dynasty = entity.getDynasty();
        if (dynasty != null) {
            stmt.bindString(7, dynasty);
        }
 
        String topic = entity.getTopic();
        if (topic != null) {
            stmt.bindString(8, topic);
        }
 
        String subtopic = entity.getSubtopic();
        if (subtopic != null) {
            stmt.bindString(9, subtopic);
        }
 
        Integer likes = entity.getLikes();
        if (likes != null) {
            stmt.bindLong(10, likes);
        }
 
        Integer dislikes = entity.getDislikes();
        if (dislikes != null) {
            stmt.bindLong(11, dislikes);
        }
 
        Integer subscribers = entity.getSubscribers();
        if (subscribers != null) {
            stmt.bindLong(12, subscribers);
        }
 
        Integer replies = entity.getReplies();
        if (replies != null) {
            stmt.bindLong(13, replies);
        }
 
        Integer reviews = entity.getReviews();
        if (reviews != null) {
            stmt.bindLong(14, reviews);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public PostEntity readEntity(Cursor cursor, int offset) {
        PostEntity entity = new PostEntity( //
            cursor.getString(offset + 0), // postId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imageURL
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // textURL
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // authorId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // dynasty
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // topic
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // subtopic
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // likes
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // dislikes
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // subscribers
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // replies
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13) // reviews
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PostEntity entity, int offset) {
        entity.setPostId(cursor.getString(offset + 0));
        entity.setImageURL(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTextURL(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAuthorId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDynasty(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTopic(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSubtopic(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLikes(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setDislikes(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setSubscribers(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setReplies(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setReviews(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
     }
    
    @Override
    protected final String updateKeyAfterInsert(PostEntity entity, long rowId) {
        return entity.getPostId();
    }
    
    @Override
    public String getKey(PostEntity entity) {
        if(entity != null) {
            return entity.getPostId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PostEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
